// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/widgets/explore_screen_popular_now_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:openvine/models/curation_set.dart' as _i5;
import 'package:openvine/models/video_event.dart' as _i4;
import 'package:openvine/services/content_blocklist_service.dart' as _i12;
import 'package:openvine/services/curation_service.dart' as _i8;
import 'package:openvine/services/explore_video_manager.dart' as _i3;
import 'package:openvine/services/hashtag_service.dart' as _i9;
import 'package:openvine/services/video_event_service.dart' as _i10;
import 'package:openvine/services/video_manager_interface.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIVideoManager_0 extends _i1.SmartFake implements _i2.IVideoManager {
  _FakeIVideoManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExploreVideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockExploreVideoManager extends _i1.Mock
    implements _i3.ExploreVideoManager {
  MockExploreVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  _i2.IVideoManager get videoManager => (super.noSuchMethod(
        Invocation.getter(#videoManager),
        returnValue: _FakeIVideoManager_0(
          this,
          Invocation.getter(#videoManager),
        ),
      ) as _i2.IVideoManager);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i4.VideoEvent> getVideosForType(_i5.CurationSetType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosForType,
          [type],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  _i6.Future<void> refreshCollections() => (super.noSuchMethod(
        Invocation.method(
          #refreshCollections,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void preloadCollection(
    _i5.CurationSetType? type, {
    int? startIndex = 0,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #preloadCollection,
          [type],
          {#startIndex: startIndex},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseAllVideos() => super.noSuchMethod(
        Invocation.method(
          #pauseAllVideos,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CurationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurationService extends _i1.Mock implements _i8.CurationService {
  MockCurationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.CurationSet> get curationSets => (super.noSuchMethod(
        Invocation.getter(#curationSets),
        returnValue: <_i5.CurationSet>[],
      ) as List<_i5.CurationSet>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> refreshTrendingFromAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #refreshTrendingFromAnalytics,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<_i4.VideoEvent> getVideosForSet(String? setId) => (super.noSuchMethod(
        Invocation.method(
          #getVideosForSet,
          [setId],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  List<_i4.VideoEvent> getVideosForSetType(_i5.CurationSetType? setType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosForSetType,
          [setType],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  _i5.CurationSet? getCurationSet(String? setId) =>
      (super.noSuchMethod(Invocation.method(
        #getCurationSet,
        [setId],
      )) as _i5.CurationSet?);

  @override
  _i5.CurationSet? getCurationSetByType(_i5.CurationSetType? setType) =>
      (super.noSuchMethod(Invocation.method(
        #getCurationSetByType,
        [setType],
      )) as _i5.CurationSet?);

  @override
  _i6.Future<void> refreshCurationSets({List<String>? curatorPubkeys}) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshCurationSets,
          [],
          {#curatorPubkeys: curatorPubkeys},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToCurationSets({List<String>? curatorPubkeys}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToCurationSets,
          [],
          {#curatorPubkeys: curatorPubkeys},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> createCurationSet({
    required String? id,
    required String? title,
    String? description,
    String? imageUrl,
    required List<String>? videoIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCurationSet,
          [],
          {
            #id: id,
            #title: title,
            #description: description,
            #imageUrl: imageUrl,
            #videoIds: videoIds,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  void refreshIfNeeded() => super.noSuchMethod(
        Invocation.method(
          #refreshIfNeeded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HashtagService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHashtagService extends _i1.Mock implements _i9.HashtagService {
  MockHashtagService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> get allHashtags => (super.noSuchMethod(
        Invocation.getter(#allHashtags),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> getTrendingHashtags({int? limit = 20}) => (super.noSuchMethod(
        Invocation.method(
          #getTrendingHashtags,
          [],
          {#limit: limit},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> getPopularHashtags({int? limit = 20}) => (super.noSuchMethod(
        Invocation.method(
          #getPopularHashtags,
          [],
          {#limit: limit},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> getEditorsPicks({int? limit = 10}) => (super.noSuchMethod(
        Invocation.method(
          #getEditorsPicks,
          [],
          {#limit: limit},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i9.HashtagStats? getHashtagStats(String? hashtag) =>
      (super.noSuchMethod(Invocation.method(
        #getHashtagStats,
        [hashtag],
      )) as _i9.HashtagStats?);

  @override
  List<_i4.VideoEvent> getVideosByHashtags(List<String>? hashtags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosByHashtags,
          [hashtags],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  _i6.Future<void> subscribeToHashtagVideos(
    List<String>? hashtags, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToHashtagVideos,
          [hashtags],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<String> searchHashtags(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchHashtags,
          [query],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [VideoEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoEventService extends _i1.Mock implements _i10.VideoEventService {
  MockVideoEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.VideoEvent> get videoEvents => (super.noSuchMethod(
        Invocation.getter(#videoEvents),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  bool get isSubscribed => (super.noSuchMethod(
        Invocation.getter(#isSubscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasEvents => (super.noSuchMethod(
        Invocation.getter(#hasEvents),
        returnValue: false,
      ) as bool);

  @override
  int get eventCount => (super.noSuchMethod(
        Invocation.getter(#eventCount),
        returnValue: 0,
      ) as int);

  @override
  String get classicVinesPubkey => (super.noSuchMethod(
        Invocation.getter(#classicVinesPubkey),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#classicVinesPubkey),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setBlocklistService(_i12.ContentBlocklistService? blocklistService) =>
      super.noSuchMethod(
        Invocation.method(
          #setBlocklistService,
          [blocklistService],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.VideoEvent> getVideosByAuthor(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getVideosByAuthor,
          [pubkey],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  _i6.Future<void> subscribeToVideoFeed({
    List<String>? authors,
    List<String>? hashtags,
    String? group,
    int? since,
    int? until,
    int? limit = 50,
    bool? replace = true,
    bool? includeReposts = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToVideoFeed,
          [],
          {
            #authors: authors,
            #hashtags: hashtags,
            #group: group,
            #since: since,
            #until: until,
            #limit: limit,
            #replace: replace,
            #includeReposts: includeReposts,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToUserVideos(
    String? pubkey, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToUserVideos,
          [pubkey],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToHashtagVideos(
    List<String>? hashtags, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToHashtagVideos,
          [hashtags],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> subscribeToGroupVideos(
    String? group, {
    List<String>? authors,
    int? since,
    int? until,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToGroupVideos,
          [group],
          {
            #authors: authors,
            #since: since,
            #until: until,
            #limit: limit,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<_i4.VideoEvent> getVideoEventsByGroup(String? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByGroup,
          [group],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  _i6.Future<void> refreshVideoFeed() => (super.noSuchMethod(
        Invocation.method(
          #refreshVideoFeed,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadMoreVideos({int? limit = 100}) => (super.noSuchMethod(
        Invocation.method(
          #loadMoreVideos,
          [],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadMoreEvents({int? limit = 200}) => (super.noSuchMethod(
        Invocation.method(
          #loadMoreEvents,
          [],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadMoreContentUnlimited({int? limit = 300}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMoreContentUnlimited,
          [],
          {#limit: limit},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i4.VideoEvent? getVideoEventById(String? eventId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoEventById,
        [eventId],
      )) as _i4.VideoEvent?);

  @override
  _i4.VideoEvent? getVideoEventByVineId(String? vineId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoEventByVineId,
        [vineId],
      )) as _i4.VideoEvent?);

  @override
  _i6.Future<_i4.VideoEvent?> queryVideoByVineId(String? vineId) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryVideoByVineId,
          [vineId],
        ),
        returnValue: _i6.Future<_i4.VideoEvent?>.value(),
      ) as _i6.Future<_i4.VideoEvent?>);

  @override
  List<_i4.VideoEvent> getVideoEventsByAuthor(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByAuthor,
          [pubkey],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  List<_i4.VideoEvent> getVideoEventsByHashtags(List<String>? hashtags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByHashtags,
          [hashtags],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  void clearVideoEvents() => super.noSuchMethod(
        Invocation.method(
          #clearVideoEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> unsubscribeFromVideoFeed() => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromVideoFeed,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<_i4.VideoEvent> getVideoEventsByEngagement() => (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByEngagement,
          [],
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  List<_i4.VideoEvent> getRecentVideoEvents({int? hours = 24}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentVideoEvents,
          [],
          {#hours: hours},
        ),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  Set<String> getUniqueAuthors() => (super.noSuchMethod(
        Invocation.method(
          #getUniqueAuthors,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Set<String> getAllHashtags() => (super.noSuchMethod(
        Invocation.method(
          #getAllHashtags,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Map<String, int> getVideoCountByAuthor() => (super.noSuchMethod(
        Invocation.method(
          #getVideoCountByAuthor,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  Map<String, dynamic> getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i6.Future<void> retrySubscription() => (super.noSuchMethod(
        Invocation.method(
          #retrySubscription,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shuffleForDiscovery() => super.noSuchMethod(
        Invocation.method(
          #shuffleForDiscovery,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addVideoEvent(_i4.VideoEvent? videoEvent) => super.noSuchMethod(
        Invocation.method(
          #addVideoEvent,
          [videoEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
