// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/widgets/video_feed_item_profile_tap_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:nostr_sdk/event.dart' as _i9;
import 'package:openvine/models/user_profile.dart' as _i12;
import 'package:openvine/models/video_event.dart' as _i4;
import 'package:openvine/models/video_state.dart' as _i6;
import 'package:openvine/services/analytics_service.dart' as _i15;
import 'package:openvine/services/auth_service.dart' as _i2;
import 'package:openvine/services/profile_cache_service.dart' as _i13;
import 'package:openvine/services/social_service.dart' as _i8;
import 'package:openvine/services/user_profile_service.dart' as _i11;
import 'package:openvine/services/video_manager_interface.dart' as _i3;
import 'package:video_player/video_player.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResult_0 extends _i1.SmartFake implements _i2.AuthResult {
  _FakeAuthResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IVideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIVideoManager extends _i1.Mock implements _i3.IVideoManager {
  MockIVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.VideoEvent> get videos => (super.noSuchMethod(
        Invocation.getter(#videos),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  List<_i4.VideoEvent> get readyVideos => (super.noSuchMethod(
        Invocation.getter(#readyVideos),
        returnValue: <_i4.VideoEvent>[],
      ) as List<_i4.VideoEvent>);

  @override
  int get primaryVideoCount => (super.noSuchMethod(
        Invocation.getter(#primaryVideoCount),
        returnValue: 0,
      ) as int);

  @override
  int get discoveryVideoCount => (super.noSuchMethod(
        Invocation.getter(#discoveryVideoCount),
        returnValue: 0,
      ) as int);

  @override
  _i5.Stream<void> get stateChanges => (super.noSuchMethod(
        Invocation.getter(#stateChanges),
        returnValue: _i5.Stream<void>.empty(),
      ) as _i5.Stream<void>);

  @override
  _i6.VideoState? getVideoState(String? videoId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoState,
        [videoId],
      )) as _i6.VideoState?);

  @override
  _i7.VideoPlayerController? getController(String? videoId) =>
      (super.noSuchMethod(Invocation.method(
        #getController,
        [videoId],
      )) as _i7.VideoPlayerController?);

  @override
  _i5.Future<void> addVideoEvent(_i4.VideoEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #addVideoEvent,
          [event],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> preloadVideo(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #preloadVideo,
          [videoId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void preloadAroundIndex(
    int? currentIndex, {
    int? preloadRange,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #preloadAroundIndex,
          [currentIndex],
          {#preloadRange: preloadRange},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #pauseVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseAllVideos() => super.noSuchMethod(
        Invocation.method(
          #pauseAllVideos,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopAllVideos() => super.noSuchMethod(
        Invocation.method(
          #stopAllVideos,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #resumeVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disposeVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #disposeVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> handleMemoryPressure() => (super.noSuchMethod(
        Invocation.method(
          #handleMemoryPressure,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> getDebugInfo() => (super.noSuchMethod(
        Invocation.method(
          #getDebugInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool isAtFeedBoundary(int? index) => (super.noSuchMethod(
        Invocation.method(
          #isAtFeedBoundary,
          [index],
        ),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SocialService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocialService extends _i1.Mock implements _i8.SocialService {
  MockSocialService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> get likedEventIds => (super.noSuchMethod(
        Invocation.getter(#likedEventIds),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  List<String> get followingPubkeys => (super.noSuchMethod(
        Invocation.getter(#followingPubkeys),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isLiked(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #isLiked,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasReposted(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #hasReposted,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  int? getCachedLikeCount(String? eventId) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedLikeCount,
        [eventId],
      )) as int?);

  @override
  bool isFollowing(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #isFollowing,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, int>? getCachedFollowerStats(String? pubkey) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedFollowerStats,
        [pubkey],
      )) as Map<String, int>?);

  @override
  _i5.Future<void> toggleLike(
    String? eventId,
    String? authorPubkey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleLike,
          [
            eventId,
            authorPubkey,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getLikeStatus(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLikeStatus,
          [eventId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<List<_i9.Event>> fetchLikedEvents(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLikedEvents,
          [pubkey],
        ),
        returnValue: _i5.Future<List<_i9.Event>>.value(<_i9.Event>[]),
      ) as _i5.Future<List<_i9.Event>>);

  @override
  _i5.Future<void> fetchCurrentUserFollowList() => (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUserFollowList,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> followUser(String? pubkeyToFollow) => (super.noSuchMethod(
        Invocation.method(
          #followUser,
          [pubkeyToFollow],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unfollowUser(String? pubkeyToUnfollow) =>
      (super.noSuchMethod(
        Invocation.method(
          #unfollowUser,
          [pubkeyToUnfollow],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, int>> getFollowerStats(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowerStats,
          [pubkey],
        ),
        returnValue: _i5.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i5.Future<Map<String, int>>);

  @override
  _i5.Future<int> getUserVideoCount(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getUserVideoCount,
          [pubkey],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getUserTotalLikes(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getUserTotalLikes,
          [pubkey],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> postComment({
    required String? content,
    required String? rootEventId,
    required String? rootEventAuthorPubkey,
    String? replyToEventId,
    String? replyToAuthorPubkey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postComment,
          [],
          {
            #content: content,
            #rootEventId: rootEventId,
            #rootEventAuthorPubkey: rootEventAuthorPubkey,
            #replyToEventId: replyToEventId,
            #replyToAuthorPubkey: replyToAuthorPubkey,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i9.Event> fetchCommentsForEvent(String? rootEventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommentsForEvent,
          [rootEventId],
        ),
        returnValue: _i5.Stream<_i9.Event>.empty(),
      ) as _i5.Stream<_i9.Event>);

  @override
  _i5.Future<int> getCommentCount(String? rootEventId) => (super.noSuchMethod(
        Invocation.method(
          #getCommentCount,
          [rootEventId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> cancelCommentSubscriptions(String? rootEventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelCommentSubscriptions,
          [rootEventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> repostEvent(_i9.Event? eventToRepost) => (super.noSuchMethod(
        Invocation.method(
          #repostEvent,
          [eventToRepost],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> publishRightToBeForgotten() => (super.noSuchMethod(
        Invocation.method(
          #publishRightToBeForgotten,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get authState => (super.noSuchMethod(
        Invocation.getter(#authState),
        returnValue: _i2.AuthState.unauthenticated,
      ) as _i2.AuthState);

  @override
  _i5.Stream<_i2.AuthState> get authStateStream => (super.noSuchMethod(
        Invocation.getter(#authStateStream),
        returnValue: _i5.Stream<_i2.AuthState>.empty(),
      ) as _i5.Stream<_i2.AuthState>);

  @override
  _i5.Stream<_i2.UserProfile?> get profileStream => (super.noSuchMethod(
        Invocation.getter(#profileStream),
        returnValue: _i5.Stream<_i2.UserProfile?>.empty(),
      ) as _i5.Stream<_i2.UserProfile?>);

  @override
  bool get migrationRequired => (super.noSuchMethod(
        Invocation.getter(#migrationRequired),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get userStats => (super.noSuchMethod(
        Invocation.getter(#userStats),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> performMigrationIfNeeded({String? biometricPrompt}) =>
      (super.noSuchMethod(
        Invocation.method(
          #performMigrationIfNeeded,
          [],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.AuthResult> createNewIdentity({String? biometricPrompt}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewIdentity,
          [],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #createNewIdentity,
            [],
            {#biometricPrompt: biometricPrompt},
          ),
        )),
      ) as _i5.Future<_i2.AuthResult>);

  @override
  _i5.Future<_i2.AuthResult> importFromNsec(
    String? nsec, {
    String? biometricPrompt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importFromNsec,
          [nsec],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #importFromNsec,
            [nsec],
            {#biometricPrompt: biometricPrompt},
          ),
        )),
      ) as _i5.Future<_i2.AuthResult>);

  @override
  _i5.Future<_i2.AuthResult> importFromHex(
    String? privateKeyHex, {
    String? biometricPrompt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importFromHex,
          [privateKeyHex],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #importFromHex,
            [privateKeyHex],
            {#biometricPrompt: biometricPrompt},
          ),
        )),
      ) as _i5.Future<_i2.AuthResult>);

  @override
  _i5.Future<void> refreshCurrentProfile(
          _i11.UserProfileService? userProfileService) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshCurrentProfile,
          [userProfileService],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> signOut({bool? deleteKeys = false}) => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
          {#deleteKeys: deleteKeys},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getPrivateKeyForSigning({String? biometricPrompt}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrivateKeyForSigning,
          [],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<String?> exportNsec({String? biometricPrompt}) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportNsec,
          [],
          {#biometricPrompt: biometricPrompt},
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<_i9.Event?> createAndSignEvent({
    required int? kind,
    required String? content,
    List<List<String>>? tags,
    String? biometricPrompt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAndSignEvent,
          [],
          {
            #kind: kind,
            #content: content,
            #tags: tags,
            #biometricPrompt: biometricPrompt,
          },
        ),
        returnValue: _i5.Future<_i9.Event?>.value(),
      ) as _i5.Future<_i9.Event?>);

  @override
  _i5.Future<void> setWebAuthenticationKey(String? publicKeyHex) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWebAuthenticationKey,
          [publicKeyHex],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserProfileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileService extends _i1.Mock
    implements _i11.UserProfileService {
  MockUserProfileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i12.UserProfile> get allProfiles => (super.noSuchMethod(
        Invocation.getter(#allProfiles),
        returnValue: <String, _i12.UserProfile>{},
      ) as Map<String, _i12.UserProfile>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setPersistentCache(_i13.ProfileCacheService? cacheService) =>
      super.noSuchMethod(
        Invocation.method(
          #setPersistentCache,
          [cacheService],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.UserProfile? getCachedProfile(String? pubkey) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedProfile,
        [pubkey],
      )) as _i12.UserProfile?);

  @override
  bool hasProfile(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #hasProfile,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool shouldSkipProfileFetch(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #shouldSkipProfileFetch,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void markProfileAsMissing(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #markProfileAsMissing,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> updateCachedProfile(_i12.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCachedProfile,
          [profile],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i12.UserProfile?> fetchProfile(
    String? pubkey, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfile,
          [pubkey],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i5.Future<_i12.UserProfile?>.value(),
      ) as _i5.Future<_i12.UserProfile?>);

  @override
  _i5.Future<void> fetchMultipleProfiles(
    List<String>? pubkeys, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMultipleProfiles,
          [pubkeys],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  String getDisplayName(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getDisplayName,
          [pubkey],
        ),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayName,
            [pubkey],
          ),
        ),
      ) as String);

  @override
  String? getAvatarUrl(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getAvatarUrl,
        [pubkey],
      )) as String?);

  @override
  String? getUserBio(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getUserBio,
        [pubkey],
      )) as String?);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeProfile(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #removeProfile,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i15.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get analyticsEnabled => (super.noSuchMethod(
        Invocation.getter(#analyticsEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setAnalyticsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAnalyticsEnabled,
          [enabled],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> trackVideoView(
    _i4.VideoEvent? video, {
    String? source = 'mobile',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackVideoView,
          [video],
          {#source: source},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> trackVideoViews(
    List<_i4.VideoEvent>? videos, {
    String? source = 'mobile',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trackVideoViews,
          [videos],
          {#source: source},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearTrackedViews() => super.noSuchMethod(
        Invocation.method(
          #clearTrackedViews,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
