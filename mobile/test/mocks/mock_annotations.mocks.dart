// Mocks generated by Mockito 5.4.5 from annotations
// in nostrvine_app/test/mocks/mock_annotations.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i11;

import 'package:connectivity_plus/connectivity_plus.dart' as _i16;
import 'package:flutter/foundation.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:nostr/nostr.dart' as _i13;
import 'package:nostrvine_app/models/nip94_metadata.dart' as _i14;
import 'package:nostrvine_app/models/user_profile.dart' as _i18;
import 'package:nostrvine_app/models/video_event.dart' as _i20;
import 'package:nostrvine_app/providers/video_feed_provider.dart' as _i19;
import 'package:nostrvine_app/services/connection_status_service.dart' as _i15;
import 'package:nostrvine_app/services/nostr_key_manager.dart' as _i3;
import 'package:nostrvine_app/services/nostr_service_interface.dart' as _i4;
import 'package:nostrvine_app/services/seen_videos_service.dart' as _i17;
import 'package:nostrvine_app/services/user_profile_service.dart' as _i6;
import 'package:nostrvine_app/services/video_cache_service.dart' as _i5;
import 'package:video_player/src/closed_caption_file.dart' as _i10;
import 'package:video_player/video_player.dart' as _i2;
import 'package:video_player_platform_interface/video_player_platform_interface.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoPlayerValue_0 extends _i1.SmartFake
    implements _i2.VideoPlayerValue {
  _FakeVideoPlayerValue_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrKeyManager_1 extends _i1.SmartFake
    implements _i3.NostrKeyManager {
  _FakeNostrKeyManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrBroadcastResult_2 extends _i1.SmartFake
    implements _i4.NostrBroadcastResult {
  _FakeNostrBroadcastResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoCacheService_3 extends _i1.SmartFake
    implements _i5.VideoCacheService {
  _FakeVideoCacheService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfileService_4 extends _i1.SmartFake
    implements _i6.UserProfileService {
  _FakeUserProfileService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VideoPlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoPlayerController extends _i1.Mock
    implements _i2.VideoPlayerController {
  MockVideoPlayerController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get dataSource => (super.noSuchMethod(
        Invocation.getter(#dataSource),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#dataSource),
        ),
      ) as String);

  @override
  Map<String, String> get httpHeaders => (super.noSuchMethod(
        Invocation.getter(#httpHeaders),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  _i8.DataSourceType get dataSourceType => (super.noSuchMethod(
        Invocation.getter(#dataSourceType),
        returnValue: _i8.DataSourceType.asset,
      ) as _i8.DataSourceType);

  @override
  _i8.VideoViewType get viewType => (super.noSuchMethod(
        Invocation.getter(#viewType),
        returnValue: _i8.VideoViewType.textureView,
      ) as _i8.VideoViewType);

  @override
  int get playerId => (super.noSuchMethod(
        Invocation.getter(#playerId),
        returnValue: 0,
      ) as int);

  @override
  _i9.Future<Duration?> get position => (super.noSuchMethod(
        Invocation.getter(#position),
        returnValue: _i9.Future<Duration?>.value(),
      ) as _i9.Future<Duration?>);

  @override
  _i2.VideoPlayerValue get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _FakeVideoPlayerValue_0(
          this,
          Invocation.getter(#value),
        ),
      ) as _i2.VideoPlayerValue);

  @override
  set value(_i2.VideoPlayerValue? newValue) => super.noSuchMethod(
        Invocation.setter(
          #value,
          newValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setLooping(bool? looping) => (super.noSuchMethod(
        Invocation.method(
          #setLooping,
          [looping],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> seekTo(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [position],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> setPlaybackSpeed(double? speed) => (super.noSuchMethod(
        Invocation.method(
          #setPlaybackSpeed,
          [speed],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void setCaptionOffset(Duration? offset) => super.noSuchMethod(
        Invocation.method(
          #setCaptionOffset,
          [offset],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> setClosedCaptionFile(
          _i9.Future<_i10.ClosedCaptionFile>? closedCaptionFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #setClosedCaptionFile,
          [closedCaptionFile],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChangeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeNotifier extends _i1.Mock implements _i12.ChangeNotifier {
  MockChangeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [INostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINostrService extends _i1.Mock implements _i4.INostrService {
  MockINostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  List<String> get connectedRelays => (super.noSuchMethod(
        Invocation.getter(#connectedRelays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasKeys => (super.noSuchMethod(
        Invocation.getter(#hasKeys),
        returnValue: false,
      ) as bool);

  @override
  _i3.NostrKeyManager get keyManager => (super.noSuchMethod(
        Invocation.getter(#keyManager),
        returnValue: _FakeNostrKeyManager_1(
          this,
          Invocation.getter(#keyManager),
        ),
      ) as _i3.NostrKeyManager);

  @override
  int get relayCount => (super.noSuchMethod(
        Invocation.getter(#relayCount),
        returnValue: 0,
      ) as int);

  @override
  int get connectedRelayCount => (super.noSuchMethod(
        Invocation.getter(#connectedRelayCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize({List<String>? customRelays}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#customRelays: customRelays},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Stream<_i13.Event> subscribeToEvents(
          {required List<_i13.Filter>? filters}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [],
          {#filters: filters},
        ),
        returnValue: _i9.Stream<_i13.Event>.empty(),
      ) as _i9.Stream<_i13.Event>);

  @override
  _i9.Future<_i4.NostrBroadcastResult> broadcastEvent(_i13.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastEvent,
          [event],
        ),
        returnValue: _i9.Future<_i4.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_2(
          this,
          Invocation.method(
            #broadcastEvent,
            [event],
          ),
        )),
      ) as _i9.Future<_i4.NostrBroadcastResult>);

  @override
  _i9.Future<_i4.NostrBroadcastResult> publishFileMetadata({
    required _i14.NIP94Metadata? metadata,
    required String? content,
    List<String>? hashtags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishFileMetadata,
          [],
          {
            #metadata: metadata,
            #content: content,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i9.Future<_i4.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_2(
          this,
          Invocation.method(
            #publishFileMetadata,
            [],
            {
              #metadata: metadata,
              #content: content,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i9.Future<_i4.NostrBroadcastResult>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConnectionStatusService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionStatusService extends _i1.Mock
    implements _i15.ConnectionStatusService {
  MockConnectionStatusService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  bool get hasInternetAccess => (super.noSuchMethod(
        Invocation.getter(#hasInternetAccess),
        returnValue: false,
      ) as bool);

  @override
  bool get isOffline => (super.noSuchMethod(
        Invocation.getter(#isOffline),
        returnValue: false,
      ) as bool);

  @override
  List<_i16.ConnectivityResult> get connectionTypes => (super.noSuchMethod(
        Invocation.getter(#connectionTypes),
        returnValue: <_i16.ConnectivityResult>[],
      ) as List<_i16.ConnectivityResult>);

  @override
  String get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#connectionStatus),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> checkConnectivityNow() => (super.noSuchMethod(
        Invocation.method(
          #checkConnectivityNow,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<bool> waitForConnection(
          {Duration? timeout = const Duration(seconds: 30)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitForConnection,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  Map<String, dynamic> getConnectionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SeenVideosService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeenVideosService extends _i1.Mock implements _i17.SeenVideosService {
  MockSeenVideosService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  int get seenVideoCount => (super.noSuchMethod(
        Invocation.getter(#seenVideoCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  bool hasSeenVideo(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #hasSeenVideo,
          [videoId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> markVideoAsSeen(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #markVideoAsSeen,
          [videoId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> markVideosAsSeen(List<String>? videoIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #markVideosAsSeen,
          [videoIds],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> clearSeenVideos() => (super.noSuchMethod(
        Invocation.method(
          #clearSeenVideos,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> markVideoAsUnseen(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #markVideoAsUnseen,
          [videoId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  Map<String, dynamic> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserProfileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileService extends _i1.Mock
    implements _i6.UserProfileService {
  MockUserProfileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i18.UserProfile> get allProfiles => (super.noSuchMethod(
        Invocation.getter(#allProfiles),
        returnValue: <String, _i18.UserProfile>{},
      ) as Map<String, _i18.UserProfile>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i18.UserProfile? getCachedProfile(String? pubkey) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedProfile,
        [pubkey],
      )) as _i18.UserProfile?);

  @override
  bool hasProfile(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #hasProfile,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i18.UserProfile?> fetchProfile(
    String? pubkey, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfile,
          [pubkey],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i9.Future<_i18.UserProfile?>.value(),
      ) as _i9.Future<_i18.UserProfile?>);

  @override
  _i9.Future<void> fetchMultipleProfiles(
    List<String>? pubkeys, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMultipleProfiles,
          [pubkeys],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  String getDisplayName(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getDisplayName,
          [pubkey],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayName,
            [pubkey],
          ),
        ),
      ) as String);

  @override
  String? getAvatarUrl(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getAvatarUrl,
        [pubkey],
      )) as String?);

  @override
  String? getUserBio(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getUserBio,
        [pubkey],
      )) as String?);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeProfile(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #removeProfile,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> updateProfile(Map<String, dynamic>? profileData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [profileData],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<_i18.UserProfile?> fetchCurrentUserProfile(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUserProfile,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i9.Future<_i18.UserProfile?>.value(),
      ) as _i9.Future<_i18.UserProfile?>);

  @override
  Map<String, dynamic> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [VideoFeedProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoFeedProvider extends _i1.Mock implements _i19.VideoFeedProvider {
  MockVideoFeedProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i20.VideoEvent> get videoEvents => (super.noSuchMethod(
        Invocation.getter(#videoEvents),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  List<_i20.VideoEvent> get allVideoEvents => (super.noSuchMethod(
        Invocation.getter(#allVideoEvents),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isRefreshing => (super.noSuchMethod(
        Invocation.getter(#isRefreshing),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoadingMore => (super.noSuchMethod(
        Invocation.getter(#isLoadingMore),
        returnValue: false,
      ) as bool);

  @override
  bool get hasEvents => (super.noSuchMethod(
        Invocation.getter(#hasEvents),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  int get eventCount => (super.noSuchMethod(
        Invocation.getter(#eventCount),
        returnValue: 0,
      ) as int);

  @override
  bool get isSubscribed => (super.noSuchMethod(
        Invocation.getter(#isSubscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get canLoadMore => (super.noSuchMethod(
        Invocation.getter(#canLoadMore),
        returnValue: false,
      ) as bool);

  @override
  _i5.VideoCacheService get videoCacheService => (super.noSuchMethod(
        Invocation.getter(#videoCacheService),
        returnValue: _FakeVideoCacheService_3(
          this,
          Invocation.getter(#videoCacheService),
        ),
      ) as _i5.VideoCacheService);

  @override
  _i6.UserProfileService get userProfileService => (super.noSuchMethod(
        Invocation.getter(#userProfileService),
        returnValue: _FakeUserProfileService_4(
          this,
          Invocation.getter(#userProfileService),
        ),
      ) as _i6.UserProfileService);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> refreshFeed() => (super.noSuchMethod(
        Invocation.method(
          #refreshFeed,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> loadMoreEvents() => (super.noSuchMethod(
        Invocation.method(
          #loadMoreEvents,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> subscribeToUser(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToUser,
          [pubkey],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> subscribeToHashtags(List<String>? hashtags) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToHashtags,
          [hashtags],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i20.VideoEvent? getVideoEvent(String? eventId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoEvent,
        [eventId],
      )) as _i20.VideoEvent?);

  @override
  List<_i20.VideoEvent> getVideosByAuthor(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosByAuthor,
          [pubkey],
        ),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  List<_i20.VideoEvent> getVideosByHashtags(List<String>? hashtags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosByHashtags,
          [hashtags],
        ),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  List<_i20.VideoEvent> getVideosByEngagement() => (super.noSuchMethod(
        Invocation.method(
          #getVideosByEngagement,
          [],
        ),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  List<_i20.VideoEvent> getRecentVideos({int? hours = 24}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentVideos,
          [],
          {#hours: hours},
        ),
        returnValue: <_i20.VideoEvent>[],
      ) as List<_i20.VideoEvent>);

  @override
  Set<String> getUniqueAuthors() => (super.noSuchMethod(
        Invocation.method(
          #getUniqueAuthors,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Set<String> getAllHashtags() => (super.noSuchMethod(
        Invocation.method(
          #getAllHashtags,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Map<String, int> getVideoCountByAuthor() => (super.noSuchMethod(
        Invocation.method(
          #getVideoCountByAuthor,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  _i9.Future<void> preloadVideosAroundIndex(int? currentIndex) =>
      (super.noSuchMethod(
        Invocation.method(
          #preloadVideosAroundIndex,
          [currentIndex],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> retry() => (super.noSuchMethod(
        Invocation.method(
          #retry,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
