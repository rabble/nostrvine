// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/services/video_manager_blocklist_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:openvine/services/content_blocklist_service.dart' as _i2;
import 'package:openvine/services/seen_videos_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ContentBlocklistService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentBlocklistService extends _i1.Mock
    implements _i2.ContentBlocklistService {
  MockContentBlocklistService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> get blockedPubkeys => (super.noSuchMethod(
        Invocation.getter(#blockedPubkeys),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  int get totalBlockedCount => (super.noSuchMethod(
        Invocation.getter(#totalBlockedCount),
        returnValue: 0,
      ) as int);

  @override
  Set<String> get runtimeBlockedUsers => (super.noSuchMethod(
        Invocation.getter(#runtimeBlockedUsers),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Map<String, dynamic> get blockingStats => (super.noSuchMethod(
        Invocation.getter(#blockingStats),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isBlocked(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #isBlocked,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool shouldFilterFromFeeds(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #shouldFilterFromFeeds,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void blockUser(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #blockUser,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unblockUser(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #unblockUser,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<T> filterContent<T>(
    List<T>? content,
    String Function(T)? getPubkey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterContent,
          [
            content,
            getPubkey,
          ],
        ),
        returnValue: <T>[],
      ) as List<T>);

  @override
  bool isInternallyBlocked(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #isInternallyBlocked,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearRuntimeBlocks() => super.noSuchMethod(
        Invocation.method(
          #clearRuntimeBlocks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SeenVideosService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeenVideosService extends _i1.Mock implements _i4.SeenVideosService {
  MockSeenVideosService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  int get seenVideoCount => (super.noSuchMethod(
        Invocation.getter(#seenVideoCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  bool hasSeenVideo(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #hasSeenVideo,
          [videoId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> markVideoAsSeen(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #markVideoAsSeen,
          [videoId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markVideosAsSeen(List<String>? videoIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #markVideosAsSeen,
          [videoIds],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearSeenVideos() => (super.noSuchMethod(
        Invocation.method(
          #clearSeenVideos,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markVideoAsUnseen(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #markVideoAsUnseen,
          [videoId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  Map<String, dynamic> getStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getStatistics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i3.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
