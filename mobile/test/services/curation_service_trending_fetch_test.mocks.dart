// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/services/curation_service_trending_fetch_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:nostr_sdk/event.dart' as _i5;
import 'package:nostr_sdk/filter.dart' as _i6;
import 'package:openvine/models/nip94_metadata.dart' as _i7;
import 'package:openvine/models/video_event.dart' as _i10;
import 'package:openvine/services/content_blocklist_service.dart' as _i12;
import 'package:openvine/services/nostr_key_manager.dart' as _i2;
import 'package:openvine/services/nostr_service_interface.dart' as _i3;
import 'package:openvine/services/social_service.dart' as _i13;
import 'package:openvine/services/video_event_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNostrKeyManager_0 extends _i1.SmartFake
    implements _i2.NostrKeyManager {
  _FakeNostrKeyManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrBroadcastResult_1 extends _i1.SmartFake
    implements _i3.NostrBroadcastResult {
  _FakeNostrBroadcastResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [INostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINostrService extends _i1.Mock implements _i3.INostrService {
  MockINostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  List<String> get connectedRelays => (super.noSuchMethod(
        Invocation.getter(#connectedRelays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasKeys => (super.noSuchMethod(
        Invocation.getter(#hasKeys),
        returnValue: false,
      ) as bool);

  @override
  _i2.NostrKeyManager get keyManager => (super.noSuchMethod(
        Invocation.getter(#keyManager),
        returnValue: _FakeNostrKeyManager_0(
          this,
          Invocation.getter(#keyManager),
        ),
      ) as _i2.NostrKeyManager);

  @override
  int get relayCount => (super.noSuchMethod(
        Invocation.getter(#relayCount),
        returnValue: 0,
      ) as int);

  @override
  int get connectedRelayCount => (super.noSuchMethod(
        Invocation.getter(#connectedRelayCount),
        returnValue: 0,
      ) as int);

  @override
  List<String> get relays => (super.noSuchMethod(
        Invocation.getter(#relays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Map<String, dynamic> get relayStatuses => (super.noSuchMethod(
        Invocation.getter(#relayStatuses),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize({List<String>? customRelays}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#customRelays: customRelays},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i5.Event> subscribeToEvents({
    required List<_i6.Filter>? filters,
    bool? bypassLimits = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [],
          {
            #filters: filters,
            #bypassLimits: bypassLimits,
          },
        ),
        returnValue: _i4.Stream<_i5.Event>.empty(),
      ) as _i4.Stream<_i5.Event>);

  @override
  _i4.Future<_i3.NostrBroadcastResult> broadcastEvent(_i5.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastEvent,
          [event],
        ),
        returnValue: _i4.Future<_i3.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_1(
          this,
          Invocation.method(
            #broadcastEvent,
            [event],
          ),
        )),
      ) as _i4.Future<_i3.NostrBroadcastResult>);

  @override
  _i4.Future<_i3.NostrBroadcastResult> publishFileMetadata({
    required _i7.NIP94Metadata? metadata,
    required String? content,
    List<String>? hashtags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishFileMetadata,
          [],
          {
            #metadata: metadata,
            #content: content,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i4.Future<_i3.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_1(
          this,
          Invocation.method(
            #publishFileMetadata,
            [],
            {
              #metadata: metadata,
              #content: content,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i4.Future<_i3.NostrBroadcastResult>);

  @override
  _i4.Future<_i3.NostrBroadcastResult> publishVideoEvent({
    required String? videoUrl,
    required String? content,
    String? title,
    String? thumbnailUrl,
    int? duration,
    String? dimensions,
    String? mimeType,
    String? sha256,
    int? fileSize,
    List<String>? hashtags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishVideoEvent,
          [],
          {
            #videoUrl: videoUrl,
            #content: content,
            #title: title,
            #thumbnailUrl: thumbnailUrl,
            #duration: duration,
            #dimensions: dimensions,
            #mimeType: mimeType,
            #sha256: sha256,
            #fileSize: fileSize,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i4.Future<_i3.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_1(
          this,
          Invocation.method(
            #publishVideoEvent,
            [],
            {
              #videoUrl: videoUrl,
              #content: content,
              #title: title,
              #thumbnailUrl: thumbnailUrl,
              #duration: duration,
              #dimensions: dimensions,
              #mimeType: mimeType,
              #sha256: sha256,
              #fileSize: fileSize,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i4.Future<_i3.NostrBroadcastResult>);

  @override
  _i4.Future<bool> addRelay(String? relayUrl) => (super.noSuchMethod(
        Invocation.method(
          #addRelay,
          [relayUrl],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> removeRelay(String? relayUrl) => (super.noSuchMethod(
        Invocation.method(
          #removeRelay,
          [relayUrl],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, bool> getRelayStatus() => (super.noSuchMethod(
        Invocation.method(
          #getRelayStatus,
          [],
        ),
        returnValue: <String, bool>{},
      ) as Map<String, bool>);

  @override
  _i4.Future<void> reconnectAll() => (super.noSuchMethod(
        Invocation.method(
          #reconnectAll,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> closeAllSubscriptions() => (super.noSuchMethod(
        Invocation.method(
          #closeAllSubscriptions,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [VideoEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoEventService extends _i1.Mock implements _i9.VideoEventService {
  MockVideoEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.VideoEvent> get videoEvents => (super.noSuchMethod(
        Invocation.getter(#videoEvents),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  bool get isSubscribed => (super.noSuchMethod(
        Invocation.getter(#isSubscribed),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasEvents => (super.noSuchMethod(
        Invocation.getter(#hasEvents),
        returnValue: false,
      ) as bool);

  @override
  int get eventCount => (super.noSuchMethod(
        Invocation.getter(#eventCount),
        returnValue: 0,
      ) as int);

  @override
  String get classicVinesPubkey => (super.noSuchMethod(
        Invocation.getter(#classicVinesPubkey),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#classicVinesPubkey),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setBlocklistService(_i12.ContentBlocklistService? blocklistService) =>
      super.noSuchMethod(
        Invocation.method(
          #setBlocklistService,
          [blocklistService],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i10.VideoEvent> getVideosByAuthor(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosByAuthor,
          [pubkey],
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  _i4.Future<void> subscribeToVideoFeed({
    List<String>? authors,
    List<String>? hashtags,
    String? group,
    int? since,
    int? until,
    int? limit = 50,
    bool? replace = true,
    bool? includeReposts = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToVideoFeed,
          [],
          {
            #authors: authors,
            #hashtags: hashtags,
            #group: group,
            #since: since,
            #until: until,
            #limit: limit,
            #replace: replace,
            #includeReposts: includeReposts,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> subscribeToUserVideos(
    String? pubkey, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToUserVideos,
          [pubkey],
          {#limit: limit},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> subscribeToHashtagVideos(
    List<String>? hashtags, {
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToHashtagVideos,
          [hashtags],
          {#limit: limit},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> subscribeToGroupVideos(
    String? group, {
    List<String>? authors,
    int? since,
    int? until,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToGroupVideos,
          [group],
          {
            #authors: authors,
            #since: since,
            #until: until,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i10.VideoEvent> getVideoEventsByGroup(String? group) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByGroup,
          [group],
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  _i4.Future<void> refreshVideoFeed() => (super.noSuchMethod(
        Invocation.method(
          #refreshVideoFeed,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadMoreVideos({int? limit = 100}) => (super.noSuchMethod(
        Invocation.method(
          #loadMoreVideos,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadMoreEvents({int? limit = 200}) => (super.noSuchMethod(
        Invocation.method(
          #loadMoreEvents,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadMoreContentUnlimited({int? limit = 300}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMoreContentUnlimited,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i10.VideoEvent? getVideoEventById(String? eventId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoEventById,
        [eventId],
      )) as _i10.VideoEvent?);

  @override
  _i10.VideoEvent? getVideoEventByVineId(String? vineId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoEventByVineId,
        [vineId],
      )) as _i10.VideoEvent?);

  @override
  _i4.Future<_i10.VideoEvent?> queryVideoByVineId(String? vineId) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryVideoByVineId,
          [vineId],
        ),
        returnValue: _i4.Future<_i10.VideoEvent?>.value(),
      ) as _i4.Future<_i10.VideoEvent?>);

  @override
  List<_i10.VideoEvent> getVideoEventsByAuthor(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByAuthor,
          [pubkey],
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  List<_i10.VideoEvent> getVideoEventsByHashtags(List<String>? hashtags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByHashtags,
          [hashtags],
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  void clearVideoEvents() => super.noSuchMethod(
        Invocation.method(
          #clearVideoEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> unsubscribeFromVideoFeed() => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromVideoFeed,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i10.VideoEvent> getVideoEventsByEngagement() => (super.noSuchMethod(
        Invocation.method(
          #getVideoEventsByEngagement,
          [],
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  List<_i10.VideoEvent> getRecentVideoEvents({int? hours = 24}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecentVideoEvents,
          [],
          {#hours: hours},
        ),
        returnValue: <_i10.VideoEvent>[],
      ) as List<_i10.VideoEvent>);

  @override
  Set<String> getUniqueAuthors() => (super.noSuchMethod(
        Invocation.method(
          #getUniqueAuthors,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Set<String> getAllHashtags() => (super.noSuchMethod(
        Invocation.method(
          #getAllHashtags,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Map<String, int> getVideoCountByAuthor() => (super.noSuchMethod(
        Invocation.method(
          #getVideoCountByAuthor,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  Map<String, dynamic> getConnectionStatus() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStatus,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Future<void> retrySubscription() => (super.noSuchMethod(
        Invocation.method(
          #retrySubscription,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shuffleForDiscovery() => super.noSuchMethod(
        Invocation.method(
          #shuffleForDiscovery,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addVideoEvent(_i10.VideoEvent? videoEvent) => super.noSuchMethod(
        Invocation.method(
          #addVideoEvent,
          [videoEvent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SocialService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocialService extends _i1.Mock implements _i13.SocialService {
  MockSocialService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> get likedEventIds => (super.noSuchMethod(
        Invocation.getter(#likedEventIds),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  List<String> get followingPubkeys => (super.noSuchMethod(
        Invocation.getter(#followingPubkeys),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isLiked(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #isLiked,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool hasReposted(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #hasReposted,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  int? getCachedLikeCount(String? eventId) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedLikeCount,
        [eventId],
      )) as int?);

  @override
  bool isFollowing(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #isFollowing,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, int>? getCachedFollowerStats(String? pubkey) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedFollowerStats,
        [pubkey],
      )) as Map<String, int>?);

  @override
  _i4.Future<void> toggleLike(
    String? eventId,
    String? authorPubkey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleLike,
          [
            eventId,
            authorPubkey,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>> getLikeStatus(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLikeStatus,
          [eventId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<_i5.Event>> fetchLikedEvents(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLikedEvents,
          [pubkey],
        ),
        returnValue: _i4.Future<List<_i5.Event>>.value(<_i5.Event>[]),
      ) as _i4.Future<List<_i5.Event>>);

  @override
  _i4.Future<void> fetchCurrentUserFollowList() => (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUserFollowList,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> followUser(String? pubkeyToFollow) => (super.noSuchMethod(
        Invocation.method(
          #followUser,
          [pubkeyToFollow],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unfollowUser(String? pubkeyToUnfollow) =>
      (super.noSuchMethod(
        Invocation.method(
          #unfollowUser,
          [pubkeyToUnfollow],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, int>> getFollowerStats(String? pubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFollowerStats,
          [pubkey],
        ),
        returnValue: _i4.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i4.Future<Map<String, int>>);

  @override
  _i4.Future<int> getUserVideoCount(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getUserVideoCount,
          [pubkey],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> getUserTotalLikes(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getUserTotalLikes,
          [pubkey],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> postComment({
    required String? content,
    required String? rootEventId,
    required String? rootEventAuthorPubkey,
    String? replyToEventId,
    String? replyToAuthorPubkey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postComment,
          [],
          {
            #content: content,
            #rootEventId: rootEventId,
            #rootEventAuthorPubkey: rootEventAuthorPubkey,
            #replyToEventId: replyToEventId,
            #replyToAuthorPubkey: replyToAuthorPubkey,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i5.Event> fetchCommentsForEvent(String? rootEventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCommentsForEvent,
          [rootEventId],
        ),
        returnValue: _i4.Stream<_i5.Event>.empty(),
      ) as _i4.Stream<_i5.Event>);

  @override
  _i4.Future<int> getCommentCount(String? rootEventId) => (super.noSuchMethod(
        Invocation.method(
          #getCommentCount,
          [rootEventId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> cancelCommentSubscriptions(String? rootEventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelCommentSubscriptions,
          [rootEventId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> repostEvent(_i5.Event? eventToRepost) => (super.noSuchMethod(
        Invocation.method(
          #repostEvent,
          [eventToRepost],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> publishRightToBeForgotten() => (super.noSuchMethod(
        Invocation.method(
          #publishRightToBeForgotten,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
