// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/services/profile_editing_race_condition_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:openvine/models/user_profile.dart' as _i3;
import 'package:openvine/services/profile_cache_service.dart' as _i5;
import 'package:openvine/services/subscription_manager.dart' as _i4;
import 'package:openvine/services/user_profile_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserProfileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileService extends _i1.Mock
    implements _i2.UserProfileService {
  MockUserProfileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i3.UserProfile> get allProfiles => (super.noSuchMethod(
        Invocation.getter(#allProfiles),
        returnValue: <String, _i3.UserProfile>{},
      ) as Map<String, _i3.UserProfile>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setSubscriptionManager(_i4.SubscriptionManager? subscriptionManager) =>
      super.noSuchMethod(
        Invocation.method(
          #setSubscriptionManager,
          [subscriptionManager],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setPersistentCache(_i5.ProfileCacheService? cacheService) =>
      super.noSuchMethod(
        Invocation.method(
          #setPersistentCache,
          [cacheService],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.UserProfile? getCachedProfile(String? pubkey) =>
      (super.noSuchMethod(Invocation.method(
        #getCachedProfile,
        [pubkey],
      )) as _i3.UserProfile?);

  @override
  bool hasProfile(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #hasProfile,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool shouldSkipProfileFetch(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #shouldSkipProfileFetch,
          [pubkey],
        ),
        returnValue: false,
      ) as bool);

  @override
  void markProfileAsMissing(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #markProfileAsMissing,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> updateCachedProfile(_i3.UserProfile? profile) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCachedProfile,
          [profile],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.UserProfile?> fetchProfile(
    String? pubkey, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfile,
          [pubkey],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i6.Future<_i3.UserProfile?>.value(),
      ) as _i6.Future<_i3.UserProfile?>);

  @override
  _i6.Future<void> fetchMultipleProfiles(
    List<String>? pubkeys, {
    bool? forceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMultipleProfiles,
          [pubkeys],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String getDisplayName(String? pubkey) => (super.noSuchMethod(
        Invocation.method(
          #getDisplayName,
          [pubkey],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getDisplayName,
            [pubkey],
          ),
        ),
      ) as String);

  @override
  String? getAvatarUrl(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getAvatarUrl,
        [pubkey],
      )) as String?);

  @override
  String? getUserBio(String? pubkey) => (super.noSuchMethod(Invocation.method(
        #getUserBio,
        [pubkey],
      )) as String?);

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeProfile(String? pubkey) => super.noSuchMethod(
        Invocation.method(
          #removeProfile,
          [pubkey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
