// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/services/explore_video_manager_fix_verification_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:openvine/models/curation_set.dart' as _i3;
import 'package:openvine/models/video_event.dart' as _i5;
import 'package:openvine/models/video_state.dart' as _i8;
import 'package:openvine/services/curation_service.dart' as _i2;
import 'package:openvine/services/video_manager_interface.dart' as _i7;
import 'package:video_player/video_player.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CurationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurationService extends _i1.Mock implements _i2.CurationService {
  MockCurationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.CurationSet> get curationSets => (super.noSuchMethod(
        Invocation.getter(#curationSets),
        returnValue: <_i3.CurationSet>[],
      ) as List<_i3.CurationSet>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> refreshTrendingFromAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #refreshTrendingFromAnalytics,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i5.VideoEvent> getVideosForSet(String? setId) => (super.noSuchMethod(
        Invocation.method(
          #getVideosForSet,
          [setId],
        ),
        returnValue: <_i5.VideoEvent>[],
      ) as List<_i5.VideoEvent>);

  @override
  List<_i5.VideoEvent> getVideosForSetType(_i3.CurationSetType? setType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideosForSetType,
          [setType],
        ),
        returnValue: <_i5.VideoEvent>[],
      ) as List<_i5.VideoEvent>);

  @override
  _i3.CurationSet? getCurationSet(String? setId) =>
      (super.noSuchMethod(Invocation.method(
        #getCurationSet,
        [setId],
      )) as _i3.CurationSet?);

  @override
  _i3.CurationSet? getCurationSetByType(_i3.CurationSetType? setType) =>
      (super.noSuchMethod(Invocation.method(
        #getCurationSetByType,
        [setType],
      )) as _i3.CurationSet?);

  @override
  _i4.Future<void> refreshCurationSets({List<String>? curatorPubkeys}) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshCurationSets,
          [],
          {#curatorPubkeys: curatorPubkeys},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> subscribeToCurationSets({List<String>? curatorPubkeys}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToCurationSets,
          [],
          {#curatorPubkeys: curatorPubkeys},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> createCurationSet({
    required String? id,
    required String? title,
    String? description,
    String? imageUrl,
    required List<String>? videoIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCurationSet,
          [],
          {
            #id: id,
            #title: title,
            #description: description,
            #imageUrl: imageUrl,
            #videoIds: videoIds,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void refreshIfNeeded() => super.noSuchMethod(
        Invocation.method(
          #refreshIfNeeded,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IVideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockIVideoManager extends _i1.Mock implements _i7.IVideoManager {
  MockIVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.VideoEvent> get videos => (super.noSuchMethod(
        Invocation.getter(#videos),
        returnValue: <_i5.VideoEvent>[],
      ) as List<_i5.VideoEvent>);

  @override
  List<_i5.VideoEvent> get readyVideos => (super.noSuchMethod(
        Invocation.getter(#readyVideos),
        returnValue: <_i5.VideoEvent>[],
      ) as List<_i5.VideoEvent>);

  @override
  int get primaryVideoCount => (super.noSuchMethod(
        Invocation.getter(#primaryVideoCount),
        returnValue: 0,
      ) as int);

  @override
  int get discoveryVideoCount => (super.noSuchMethod(
        Invocation.getter(#discoveryVideoCount),
        returnValue: 0,
      ) as int);

  @override
  _i4.Stream<void> get stateChanges => (super.noSuchMethod(
        Invocation.getter(#stateChanges),
        returnValue: _i4.Stream<void>.empty(),
      ) as _i4.Stream<void>);

  @override
  _i8.VideoState? getVideoState(String? videoId) =>
      (super.noSuchMethod(Invocation.method(
        #getVideoState,
        [videoId],
      )) as _i8.VideoState?);

  @override
  _i9.VideoPlayerController? getController(String? videoId) =>
      (super.noSuchMethod(Invocation.method(
        #getController,
        [videoId],
      )) as _i9.VideoPlayerController?);

  @override
  _i4.Future<void> addVideoEvent(_i5.VideoEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #addVideoEvent,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> preloadVideo(String? videoId) => (super.noSuchMethod(
        Invocation.method(
          #preloadVideo,
          [videoId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void preloadAroundIndex(
    int? currentIndex, {
    int? preloadRange,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #preloadAroundIndex,
          [currentIndex],
          {#preloadRange: preloadRange},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #pauseVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pauseAllVideos() => super.noSuchMethod(
        Invocation.method(
          #pauseAllVideos,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopAllVideos() => super.noSuchMethod(
        Invocation.method(
          #stopAllVideos,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resumeVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #resumeVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disposeVideo(String? videoId) => super.noSuchMethod(
        Invocation.method(
          #disposeVideo,
          [videoId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> handleMemoryPressure() => (super.noSuchMethod(
        Invocation.method(
          #handleMemoryPressure,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, dynamic> getDebugInfo() => (super.noSuchMethod(
        Invocation.method(
          #getDebugInfo,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool isAtFeedBoundary(int? index) => (super.noSuchMethod(
        Invocation.method(
          #isAtFeedBoundary,
          [index],
        ),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
