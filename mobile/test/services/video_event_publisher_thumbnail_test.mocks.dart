// Mocks generated by Mockito 5.4.5 from annotations
// in openvine/test/services/video_event_publisher_thumbnail_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:io' as _i8;
import 'dart:ui' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nostr_sdk/event.dart' as _i10;
import 'package:nostr_sdk/filter.dart' as _i11;
import 'package:openvine/models/nip94_metadata.dart' as _i12;
import 'package:openvine/models/pending_upload.dart' as _i2;
import 'package:openvine/services/auth_service.dart' as _i5;
import 'package:openvine/services/nostr_key_manager.dart' as _i3;
import 'package:openvine/services/nostr_service_interface.dart' as _i4;
import 'package:openvine/services/upload_manager.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePendingUpload_0 extends _i1.SmartFake implements _i2.PendingUpload {
  _FakePendingUpload_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrKeyManager_1 extends _i1.SmartFake
    implements _i3.NostrKeyManager {
  _FakeNostrKeyManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNostrBroadcastResult_2 extends _i1.SmartFake
    implements _i4.NostrBroadcastResult {
  _FakeNostrBroadcastResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResult_3 extends _i1.SmartFake implements _i5.AuthResult {
  _FakeAuthResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UploadManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadManager extends _i1.Mock implements _i6.UploadManager {
  MockUploadManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.PendingUpload> get pendingUploads => (super.noSuchMethod(
        Invocation.getter(#pendingUploads),
        returnValue: <_i2.PendingUpload>[],
      ) as List<_i2.PendingUpload>);

  @override
  List<_i2.PendingUpload> get uploadsReadyForProcessing => (super.noSuchMethod(
        Invocation.getter(#uploadsReadyForProcessing),
        returnValue: <_i2.PendingUpload>[],
      ) as List<_i2.PendingUpload>);

  @override
  Map<String, int> get uploadStats => (super.noSuchMethod(
        Invocation.getter(#uploadStats),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  List<_i2.PendingUpload> getUploadsByStatus(_i2.UploadStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUploadsByStatus,
          [status],
        ),
        returnValue: <_i2.PendingUpload>[],
      ) as List<_i2.PendingUpload>);

  @override
  _i2.PendingUpload? getUpload(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getUpload,
        [id],
      )) as _i2.PendingUpload?);

  @override
  _i7.Future<void> markUploadPublished(
    String? uploadId,
    String? nostrEventId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markUploadPublished,
          [
            uploadId,
            nostrEventId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> markUploadReadyToPublish(
    String? uploadId,
    String? cloudinaryPublicId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markUploadReadyToPublish,
          [
            uploadId,
            cloudinaryPublicId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.PendingUpload> startUpload({
    required _i8.File? videoFile,
    required String? nostrPubkey,
    String? thumbnailPath,
    String? title,
    String? description,
    List<String>? hashtags,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startUpload,
          [],
          {
            #videoFile: videoFile,
            #nostrPubkey: nostrPubkey,
            #thumbnailPath: thumbnailPath,
            #title: title,
            #description: description,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i7.Future<_i2.PendingUpload>.value(_FakePendingUpload_0(
          this,
          Invocation.method(
            #startUpload,
            [],
            {
              #videoFile: videoFile,
              #nostrPubkey: nostrPubkey,
              #thumbnailPath: thumbnailPath,
              #title: title,
              #description: description,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i7.Future<_i2.PendingUpload>);

  @override
  _i7.Future<void> pauseUpload(String? uploadId) => (super.noSuchMethod(
        Invocation.method(
          #pauseUpload,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resumeUpload(String? uploadId) => (super.noSuchMethod(
        Invocation.method(
          #resumeUpload,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> retryUpload(String? uploadId) => (super.noSuchMethod(
        Invocation.method(
          #retryUpload,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> cancelUpload(String? uploadId) => (super.noSuchMethod(
        Invocation.method(
          #cancelUpload,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteUpload(String? uploadId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUpload,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> cleanupCompletedUploads() => (super.noSuchMethod(
        Invocation.method(
          #cleanupCompletedUploads,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateUploadStatus(
    String? uploadId,
    _i2.UploadStatus? status, {
    String? nostrEventId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUploadStatus,
          [
            uploadId,
            status,
          ],
          {#nostrEventId: nostrEventId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> cleanupProblematicUploads() => (super.noSuchMethod(
        Invocation.method(
          #cleanupProblematicUploads,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  Map<String, dynamic> getPerformanceMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getPerformanceMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i6.UploadMetrics? getUploadMetrics(String? uploadId) =>
      (super.noSuchMethod(Invocation.method(
        #getUploadMetrics,
        [uploadId],
      )) as _i6.UploadMetrics?);

  @override
  List<_i6.UploadMetrics> getRecentMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getRecentMetrics,
          [],
        ),
        returnValue: <_i6.UploadMetrics>[],
      ) as List<_i6.UploadMetrics>);

  @override
  _i7.Future<void> retryUploadWithBackoff(String? uploadId) =>
      (super.noSuchMethod(
        Invocation.method(
          #retryUploadWithBackoff,
          [uploadId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [INostrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINostrService extends _i1.Mock implements _i4.INostrService {
  MockINostrService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  List<String> get connectedRelays => (super.noSuchMethod(
        Invocation.getter(#connectedRelays),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get hasKeys => (super.noSuchMethod(
        Invocation.getter(#hasKeys),
        returnValue: false,
      ) as bool);

  @override
  _i3.NostrKeyManager get keyManager => (super.noSuchMethod(
        Invocation.getter(#keyManager),
        returnValue: _FakeNostrKeyManager_1(
          this,
          Invocation.getter(#keyManager),
        ),
      ) as _i3.NostrKeyManager);

  @override
  int get relayCount => (super.noSuchMethod(
        Invocation.getter(#relayCount),
        returnValue: 0,
      ) as int);

  @override
  int get connectedRelayCount => (super.noSuchMethod(
        Invocation.getter(#connectedRelayCount),
        returnValue: 0,
      ) as int);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize({List<String>? customRelays}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#customRelays: customRelays},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Stream<_i10.Event> subscribeToEvents(
          {required List<_i11.Filter>? filters}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToEvents,
          [],
          {#filters: filters},
        ),
        returnValue: _i7.Stream<_i10.Event>.empty(),
      ) as _i7.Stream<_i10.Event>);

  @override
  _i7.Future<_i4.NostrBroadcastResult> broadcastEvent(_i10.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastEvent,
          [event],
        ),
        returnValue: _i7.Future<_i4.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_2(
          this,
          Invocation.method(
            #broadcastEvent,
            [event],
          ),
        )),
      ) as _i7.Future<_i4.NostrBroadcastResult>);

  @override
  _i7.Future<_i4.NostrBroadcastResult> publishFileMetadata({
    required _i12.NIP94Metadata? metadata,
    required String? content,
    List<String>? hashtags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishFileMetadata,
          [],
          {
            #metadata: metadata,
            #content: content,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i7.Future<_i4.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_2(
          this,
          Invocation.method(
            #publishFileMetadata,
            [],
            {
              #metadata: metadata,
              #content: content,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i7.Future<_i4.NostrBroadcastResult>);

  @override
  _i7.Future<_i4.NostrBroadcastResult> publishVideoEvent({
    required String? videoUrl,
    required String? content,
    String? title,
    String? thumbnailUrl,
    int? duration,
    String? dimensions,
    String? mimeType,
    String? sha256,
    int? fileSize,
    List<String>? hashtags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishVideoEvent,
          [],
          {
            #videoUrl: videoUrl,
            #content: content,
            #title: title,
            #thumbnailUrl: thumbnailUrl,
            #duration: duration,
            #dimensions: dimensions,
            #mimeType: mimeType,
            #sha256: sha256,
            #fileSize: fileSize,
            #hashtags: hashtags,
          },
        ),
        returnValue: _i7.Future<_i4.NostrBroadcastResult>.value(
            _FakeNostrBroadcastResult_2(
          this,
          Invocation.method(
            #publishVideoEvent,
            [],
            {
              #videoUrl: videoUrl,
              #content: content,
              #title: title,
              #thumbnailUrl: thumbnailUrl,
              #duration: duration,
              #dimensions: dimensions,
              #mimeType: mimeType,
              #sha256: sha256,
              #fileSize: fileSize,
              #hashtags: hashtags,
            },
          ),
        )),
      ) as _i7.Future<_i4.NostrBroadcastResult>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthState get authState => (super.noSuchMethod(
        Invocation.getter(#authState),
        returnValue: _i5.AuthState.unauthenticated,
      ) as _i5.AuthState);

  @override
  _i7.Stream<_i5.AuthState> get authStateStream => (super.noSuchMethod(
        Invocation.getter(#authStateStream),
        returnValue: _i7.Stream<_i5.AuthState>.empty(),
      ) as _i7.Stream<_i5.AuthState>);

  @override
  _i7.Stream<_i5.UserProfile?> get profileStream => (super.noSuchMethod(
        Invocation.getter(#profileStream),
        returnValue: _i7.Stream<_i5.UserProfile?>.empty(),
      ) as _i7.Stream<_i5.UserProfile?>);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get userStats => (super.noSuchMethod(
        Invocation.getter(#userStats),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i5.AuthResult> createNewIdentity() => (super.noSuchMethod(
        Invocation.method(
          #createNewIdentity,
          [],
        ),
        returnValue: _i7.Future<_i5.AuthResult>.value(_FakeAuthResult_3(
          this,
          Invocation.method(
            #createNewIdentity,
            [],
          ),
        )),
      ) as _i7.Future<_i5.AuthResult>);

  @override
  _i7.Future<_i5.AuthResult> importFromNsec(String? nsec) =>
      (super.noSuchMethod(
        Invocation.method(
          #importFromNsec,
          [nsec],
        ),
        returnValue: _i7.Future<_i5.AuthResult>.value(_FakeAuthResult_3(
          this,
          Invocation.method(
            #importFromNsec,
            [nsec],
          ),
        )),
      ) as _i7.Future<_i5.AuthResult>);

  @override
  _i7.Future<_i5.AuthResult> importFromHex(String? privateKeyHex) =>
      (super.noSuchMethod(
        Invocation.method(
          #importFromHex,
          [privateKeyHex],
        ),
        returnValue: _i7.Future<_i5.AuthResult>.value(_FakeAuthResult_3(
          this,
          Invocation.method(
            #importFromHex,
            [privateKeyHex],
          ),
        )),
      ) as _i7.Future<_i5.AuthResult>);

  @override
  _i7.Future<void> signOut({bool? deleteKeys = false}) => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
          {#deleteKeys: deleteKeys},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getPrivateKeyForSigning() => (super.noSuchMethod(
        Invocation.method(
          #getPrivateKeyForSigning,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<String?> exportNsec() => (super.noSuchMethod(
        Invocation.method(
          #exportNsec,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<_i10.Event?> createAndSignEvent({
    required int? kind,
    required String? content,
    List<List<String>>? tags,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAndSignEvent,
          [],
          {
            #kind: kind,
            #content: content,
            #tags: tags,
          },
        ),
        returnValue: _i7.Future<_i10.Event?>.value(),
      ) as _i7.Future<_i10.Event?>);

  @override
  _i7.Future<void> setWebAuthenticationKey(String? publicKeyHex) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWebAuthenticationKey,
          [publicKeyHex],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
